/*
* This file was generated by the Gradle 'init' task.
*
* This generated file contains a sample Java application project to get you started.
* For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
* User Manual available at https://docs.gradle.org/6.8.3/userguide/building_java_projects.html
*/

plugins {
	// Apply the application plugin to add support for building a CLI application in Java.
	id 'java-library'
	// id 'java'

	id 'application'
	id "com.diffplug.spotless" version "5.11.1" apply true
	id("org.openrewrite.rewrite").version("4.1.0")
	// id "repairer.greeting"
}

repositories {
	// Use JCenter for resolving dependencies.
	jcenter()
}

dependencies {
	// Use JUnit Jupiter API for testing.
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.1'

	// Use JUnit Jupiter Engine for testing.
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

	// This dependency is used by the application.
	implementation 'com.google.guava:guava:30.0-jre'

	//This dependency is used to locate the recipes
	// api project(":recipe")
}

//ignore errors exist in java files,makesure that gradle will continue to run rewriteFix
// compileJava{
// 	ignoreFailures = true
// }

rewrite {
	activeRecipe(
		"vifim.LockCheckRecipe",
		"vifim.repairer.Recipe.LockCheckForLoopRecipe",
		"vifim.repairer.Recipe.LockCheckIfElseRecipe",
		//"vifim.repairer.Recipe.LockCheckTryRecipe"
	)

	// This is the value of configFile. It is not necessary to specify this value
	configFile = project.getRootProject().file("/buildSrc/src/main/resources/META-INF/recipes/repairerRecipes.yml")
}

application {
	// Define the main class for the application.
	mainClass = 'repairer.App'
}

spotless{
// optional: limit format enforcement to just the files changed by this feature branch
	ratchetFrom 'master'

	format 'misc', {
		// define the files to apply `misc` to
		target '*.gradle', '*.md', '.gitignore'

		// define the steps to apply to those files
		trimTrailingWhitespace()
		indentWithTabs() // or spaces. Takes an integer argument if you don't like 4
		endWithNewline()
	}
//   java {
//     importOrder() // standard import order
//     // importOrder('java', 'javax', 'com.acme', '') // or importOrderFile
//     // You probably want an empty string at the end - all of the
//     // imports you didn't specify explicitly will go there.

//     removeUnusedImports()

//     googleJavaFormat() // has its own section below
//     eclipse()          // has its own section below
//     prettier()         // has its own section below
//     clangFormat()      // has its own section below

//     licenseHeader '/* (C) $YEAR */' // or licenseHeaderFile
//   }
}

tasks.named('test') {
	// Use junit platform for unit tests.
	useJUnitPlatform()
}

task("HelloWorld",{
	println('configure!');
	doLast({
		println('HelloWorld doLast');
	})
})
